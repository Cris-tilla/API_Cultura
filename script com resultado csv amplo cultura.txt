import logging
import scrapy
import unicodedata
from urllib.parse import urlparse, urljoin, urlsplit, urlunsplit
import re
from scrapy.crawler import CrawlerProcess
from scrapy.selector import Selector

# Selenium
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# PDF e DOCX
import requests
import pdfplumber
import os
import docx

# --- Definir logs para limpar console ---
logging.getLogger('scrapy').setLevel(logging.ERROR)
logging.getLogger('protego').setLevel(logging.ERROR)
logging.getLogger('urllib3').setLevel(logging.ERROR)

# --- Funções utilitárias ---
def normalizar(texto):
    if not texto:
        return ""
    texto = texto.lower()
    texto = unicodedata.normalize('NFD', texto)
    return ''.join(c for c in texto if unicodedata.category(c) != 'Mn').strip()

def limpar_url(url):
    parts = urlsplit(url)
    return urlunsplit((parts.scheme, parts.netloc, parts.path, '', ''))

def extrair_trecho(texto, keywords):
    for k in keywords:
        idx = texto.find(k)
        if idx != -1:
            inicio = max(0, idx - 300)
            fim = idx + 300
            trecho = texto[inicio:fim].replace('\n', ' ').strip()
            return trecho, k
    return "", "Não informado"

# --- Spider ---
class EditaisEsculturaSpider(scrapy.Spider):
    name = "editais_escultura"

   # Lista de sites dinâmicos (usar Selenium)
    dynamic_sites = [
        "https://www.gov.br/rouanet",
        "https://www.gov.br/cultura/pt-br/assuntos/fnc",
        "https://www.gov.br/funarte/editais-arte-visual",
        "https://www.gov.br/cultura/pt-br/cultura-viva",
        "https://www.gov.br/iphan/editais",
        "https://www.gov.br/iphan/programa-monumenta",
        "https://culturapresente.com.br/editais-culturais/",
        "https://www.gov.br/cultura/pt-br/assuntos/snc",
        "https://mapa.cultura.gov.br/",
        "https://www.gov.br/funarte/pt-br/editais-1",
        "https://culturaemercado.com.br/editais/",
        "https://www.gov.br/cultura/pt-br",
        "https://estado.sc.gov.br",
        "https://sesc-sc.com.br/sobre-o-sesc/licitacoes",
        "https://sesc-sc.com.br/portal/",
        "https://culturacatarina.com.br",
        "https://www.cultura.sc.gov.br/",
        "https://culturaemercado.com.br/",
        "https://www.premiopipa.com/",
        "https://app2.licitardigital.com.br/pesquisa",
        "https://www.transparencia.sc.gov.br/",
        "https://portal.doe.sea.sc.gov.br/v2.24.00/#/portal/edicao/buscar-publicacao",
        "https://portal.doe.sea.sc.gov.br/v2.24.00/#/portal",
        "https://mestresdaculturapopular.fepese.org.br",
        "https://gov.br/funarte/pt-br/editais-1/2023/premio-funarte-mestras-e-mestres-das-artes-2023",
        "https://gov.br/funarte/pt-br/editais-1/2024/edital-de-mobilidade-cultural-minc-funarte-programa-de-intercambio-cultural",
        "https://estado.sc.gov.br/noticias/fundacao-catarinense-de-cultura-abre-inscricoes-para-edital-circuito-catarinense-de-cultura/",
        "https://itapema.sc.gov.br",
        "https://camboriu.sc.gov.br",
        "https://bombinhas.sc.gov.br",
        "https://amfri.org.br",
        "https://www.gov.br/cultura",
        "https://www.gov.br/funarte",
        "https://www.gov.br/iphan",
        "https://www.bndes.gov.br",
        "https://www.gov.br/cultura/pt-br/assuntos/salic",
        "https://prosas.com.br",
        "https://www.in.gov.br",
        "https://www.fcc.sc.gov.br",
        "https://mapacultural.cim-amfri.sc.gov.br",
        "https://amfri.org.br/pagina-47428/",
        "https://www.amavi.org.br",
        "https://www.ammvi.org.br",
        "https://www.amosc.org.br",
        "https://www.amurel.org.br",
        "https://www.cisama.sc.gov.br",
        "https://amplanorte.org.br/",
        "https://balneariopicarras.atende.net/subportal/fundacao-municipal-de-cultura-fmc",
        "https://balneariopicarras.atende.net/cidadao",
        "https://barravelha.atende.net/cidadao",
        "https://bombinhas.sc.gov.br/estrutura/pagina-1056/",
        "https://camboriu.sc.gov.br/edital-fundacao-cultural/",
        "https://ilhota.sc.gov.br/pagina-2782/",
        "https://ilhota.sc.gov.br/",
        "https://fundacaocultural.itajai.sc.gov.br/",
        "https://itajai.sc.gov.br/",
        "https://www.itapema.sc.gov.br/",
        "https://luizalves.atende.net/cidadao",
        "https://navegantes.sc.gov.br/fundacao-cultural-de-navegantes/",
        "https://navegantes.sc.gov.br/",
        "https://penha.atende.net/cidadao",
        "https://portobelo.sc.gov.br/",
        "https://saojoaodoitaperiu.atende.net/cidadao"
    ]

    allowed_domains = [
        "gov.br",
        "funarte.gov.br",
        "iphan.gov.br",
        "sc.gov.br",
        "culturapresente.com.br",
        "sesc-sc.com.br",
        "prosas.com.br",
        "app2.licitardigital.com.br",
        "fundacaocultural.itajai.sc.gov.br",
        "bndes.gov.br",
        "amfri.org.br",
        "www.amavi.org.br",
        "www.ammvi.org.br",
        "www.amosc.org.br",
        "www.amurel.org.br",
        "www.cisama.sc.gov.br",
        "amplanorte.org.br",
        "balneariopicarras.atende.net",
        "barravelha.atende.net",
        "saojoaodoitaperiu.atende.net",
        "portobelo.sc.gov.br",
        "luizalves.atende.net",
        "navegantes.sc.gov.br",
        "camboriu.sc.gov.br",
        "bombinhas.sc.gov.br",
        "ilhota.sc.gov.br",
        "itajai.sc.gov.br",
        "itapema.sc.gov.br"
    ]

    start_urls = [
        "https://www.gov.br/rouanet",
        "https://www.gov.br/cultura/pt-br/assuntos/fnc",
        "https://www.gov.br/funarte/editais-arte-visual",
        "https://www.gov.br/cultura/pt-br/cultura-viva",
        "https://www.gov.br/iphan/editais",
        "https://www.gov.br/iphan/programa-monumenta",
        "https://culturapresente.com.br/editais-culturais/",
        "https://www.gov.br/cultura/pt-br/assuntos/snc",
        "https://mapa.cultura.gov.br/",
        "https://www.gov.br/funarte/pt-br/editais-1",
        "https://culturaemercado.com.br/editais/",
        "https://www.gov.br/cultura/pt-br",
        "https://estado.sc.gov.br",
        "https://sesc-sc.com.br/sobre-o-sesc/licitacoes",
        "https://sesc-sc.com.br/portal/",
        "https://culturacatarina.com.br",
        "https://www.cultura.sc.gov.br/",
        "https://culturaemercado.com.br/",
        "https://www.premiopipa.com/",
        "https://app2.licitardigital.com.br/pesquisa",
        "https://www.transparencia.sc.gov.br/",
        "https://portal.doe.sea.sc.gov.br/v2.24.00/#/portal/edicao/buscar-publicacao",
        "https://portal.doe.sea.sc.gov.br/v2.24.00/#/portal",
        "https://mestresdaculturapopular.fepese.org.br",
        "https://gov.br/funarte/pt-br/editais-1/2023/premio-funarte-mestras-e-mestres-das-artes-2023",
        "https://gov.br/funarte/pt-br/editais-1/2024/edital-de-mobilidade-cultural-minc-funarte-programa-de-intercambio-cultural",
        "https://estado.sc.gov.br/noticias/fundacao-catarinense-de-cultura-abre-inscricoes-para-edital-circuito-catarinense-de-cultura/",
        "https://fundacaocultural.itajai.sc.gov.br",
        "https://itapema.sc.gov.br",
        "https://camboriu.sc.gov.br",
        "https://bombinhas.sc.gov.br",
        "https://amfri.org.br",
        "https://www.gov.br/cultura",
        "https://www.gov.br/funarte",
        "https://www.gov.br/iphan",
        "https://www.bndes.gov.br",
        "https://www.gov.br/cultura/pt-br/assuntos/salic",
        "https://prosas.com.br",
        "https://www.in.gov.br",
        "https://www.fcc.sc.gov.br",
        "https://mapacultural.cim-amfri.sc.gov.br",
        "https://amfri.org.br/pagina-47428/",
        "https://www.amavi.org.br",
        "https://www.ammvi.org.br",
        "https://www.amosc.org.br",
        "https://www.amurel.org.br",
        "https://www.cisama.sc.gov.br",
        "https://amplanorte.org.br/",
        "https://balneariopicarras.atende.net/subportal/fundacao-municipal-de-cultura-fmc",
        "https://balneariopicarras.atende.net/cidadao",
        "https://barravelha.atende.net/cidadao",
        "https://bombinhas.sc.gov.br/estrutura/pagina-1056/",
        "https://bombinhas.sc.gov.br/",
        "https://camboriu.sc.gov.br/edital-fundacao-cultural/",
        "https://ilhota.sc.gov.br/pagina-2782/",
        "https://ilhota.sc.gov.br/",
        "https://itajai.sc.gov.br/",
        "https://luizalves.atende.net/cidadao",
        "https://navegantes.sc.gov.br/fundacao-cultural-de-navegantes/",
        "https://navegantes.sc.gov.br/",
        "https://penha.atende.net/cidadao",
        "https://portobelo.sc.gov.br/",
        "https://saojoaodoitaperiu.atende.net/cidadao"
    ]

    filtro_editais = [
        "seleção", "selecao", "processo seletivo", "inscrição", "inscricao",
        "prêmio", "premio", "bolsa", "fomento", "incentivo", "patrocínio",
        "licitação", "licitacao", "pregão", "pregao", "concorrência",
        "concorrencia", "tomada de preço", "tomada de preco", "inexigibilidade",
        "dispensa", "convite", "modalidade", "credenciamento",
        "oportunidade", "programa", "projeto", "rodada", "seletivo",
        "certame", "manifestação", "interesse", "cadastro", "registro",
        "salão", "salao", "mostra", "exposição", "exposicao", "bienal",
        "residência", "residencia", "circuito", "festival", "showcase",
        "ata", "contratação", "contratacao", "homologação", "homologacao"
    ]

    keywords_cultura = [
        "cultura", "cultural", "artes visuais", "escultura", "estatua",
        "estatueta", "relevo", "trofeu", "monumental", "monumento",
        "site-specific", "modelagem","busto", "torso", "tridimensional", "exposicao", "acervo", "mostra",
        "bienal", "3D", "arte"
    ]

    cidades_sc = {
        "balneário piçarras": "Balneário Piçarras",
        "barra velha": "Barra Velha",
        "bombinhas": "Bombinhas",
        "camboriú": "Camboriú",
        "ilhota": "Ilhota",
        "itajai": "Itajaí",
        "itapema": "Itapema",
        "luiz alves": "Luiz Alves",
        "navegantes": "Navegantes",
        "penha": "Penha",
        "porto belo": "Porto Belo"
    }

    termos_nacionais = [
        "brasil", "nacional", "todo o país", "todo o pais", "qualquer estado", "todas as regiões", "todas as regioes"
    ]
    def __init__(self):
        super().__init__()
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument(
            "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36"
        )
        self.driver = webdriver.Chrome(
            service=Service("C:/Users/Cris/Downloads/chromedriver-win64/chromedriver.exe"),
            options=chrome_options
        )
        self.visited_urls = set()

    def menciona_sc(self, texto):
        texto = normalizar(texto)
        if "santa catarina" in texto or " sc " in f" {texto} ":
            return True
        for cidade in self.cidades_sc.values():
            if normalizar(cidade) in texto:
                return True
        for termo in self.termos_nacionais:
            if termo in texto:
                return True
        return False

    def analisar_pdf(self, url):
        try:
            r = requests.get(url, headers={"User-Agent": "Mozilla/5.0"})
            pdf_path = "temp.pdf"
            with open(pdf_path, "wb") as f:
                f.write(r.content)

            texto_pdf = ""
            pagina_encontrada = ""
            palavra_chave = ""

            with pdfplumber.open(pdf_path) as pdf:
                for page in pdf.pages:
                    texto_page = normalizar(page.extract_text() or "")
                    if any(k in texto_page for k in self.keywords_cultura) and not pagina_encontrada:
                        trecho, palavra_chave = extrair_trecho(texto_page, self.keywords_cultura)
                        pagina_encontrada = str(page.page_number)
                    texto_pdf += texto_page

            os.remove(pdf_path)

            if not any(f in texto_pdf for f in self.filtro_editais):
                return None
            if not any(k in texto_pdf for k in self.keywords_cultura):
                return None
            if any(domain in url for domain in ["gov.br"]) and not self.menciona_sc(texto_pdf):
                return None

            cidade = "Desconhecida"
            for key, nome in self.cidades_sc.items():
                if key in texto_pdf:
                    cidade = nome
                    break

            prazo_match = re.search(r'\d{1,2}/\d{1,2}/\d{4}', texto_pdf)
            prazo = prazo_match.group(0) if prazo_match else ""

            return {
                "Fonte": urlparse(url).netloc,
                "Link do edital": limpar_url(url),
                "Data de publicação": prazo,
                "Página": pagina_encontrada,
                "Trecho encontrado": trecho,
                "Palavra-chave": palavra_chave,
                "Tipo": "PDF"
            }

        except Exception as e:
            self.logger.error(f"Erro PDF {url}: {e}")
            return None

    def analisar_docx(self, url):
        try:
            r = requests.get(url, headers={"User-Agent": "Mozilla/5.0"})
            docx_path = "temp.docx"
            with open(docx_path, "wb") as f:
                f.write(r.content)

            texto_docx = ""
            doc = docx.Document(docx_path)
            try:
                for p in doc.paragraphs:
                    texto_docx += normalizar(p.text) + " "
            finally:
                del doc

            os.remove(docx_path)

            if not any(f in texto_docx for f in self.filtro_editais):
                return None
            if not any(k in texto_docx for k in self.keywords_cultura):
                return None
            if any(domain in url for domain in ["gov.br"]) and not self.menciona_sc(texto_docx):
                return None

            trecho, palavra_chave = extrair_trecho(texto_docx, self.keywords_cultura)
            prazo_match = re.search(r'\d{1,2}/\d{1,2}/\d{4}', texto_docx)
            prazo = prazo_match.group(0) if prazo_match else ""

            return {
                "Fonte": urlparse(url).netloc,
                "Link do edital": limpar_url(url),
                "Data de publicação": prazo,
                "Página": "Documento",
                "Trecho encontrado": trecho,
                "Palavra-chave": palavra_chave,
                "Tipo": "DOCX"
            }

        except Exception as e:
            self.logger.error(f"Erro DOCX {url}: {e}")
            return None

    def parse(self, response):
        if response.url in self.visited_urls:
            return
        self.visited_urls.add(response.url)

        try:
            if response.url in self.dynamic_sites:
                self.driver.get(response.url)
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_all_elements_located((By.TAG_NAME, "a"))
                )
                sel = Selector(text=self.driver.page_source)
                links = sel.css("a")
                texto_pagina = normalizar(" ".join(sel.css("body *::text").getall()))
            else:
                links = response.css("a")
                texto_pagina = normalizar(" ".join(response.css("body *::text").getall()))
        except Exception as e:
            self.logger.error(f"Erro ao processar página {response.url}: {e}")
            return

        for link in links:
            href = link.attrib.get("href")
            if not href:
                continue
            href_normalizado = urljoin(response.url, href.strip())
            if href_normalizado in self.visited_urls:
                continue

            try:
                if href_normalizado.endswith('.pdf'):
                    resultado = self.analisar_pdf(href_normalizado)
                    if resultado:
                        yield resultado
                    continue
                elif href_normalizado.endswith('.docx'):
                    resultado = self.analisar_docx(href_normalizado)
                    if resultado:
                        yield resultado
                    continue

                if any(domain in href_normalizado for domain in self.allowed_domains):
                    yield response.follow(href_normalizado, callback=self.parse)
            except Exception as e:
                self.logger.error(f"Erro ao seguir link {href_normalizado}: {e}")

        if any(f in texto_pagina for f in self.filtro_editais) and any(k in texto_pagina for k in self.keywords_cultura):
            if any(domain in response.url for domain in ["gov.br"]) and not self.menciona_sc(texto_pagina):
                return
            trecho, palavra_chave = extrair_trecho(texto_pagina, self.keywords_cultura)
            prazo_match = re.search(r'\d{1,2}/\d{1,2}/\d{4}', texto_pagina)
            prazo = prazo_match.group(0) if prazo_match else ""
            yield {
                "Fonte": urlparse(response.url).netloc,
                "Link do edital": limpar_url(response.url),
                "Data de publicação": prazo,
                "Página": "Página web",
                "Trecho encontrado": trecho,
                "Palavra-chave": palavra_chave,
                "Tipo": "Página"
            }

    def closed(self, reason):
        self.driver.quit()


# --- Rodar spider ---
if __name__ == "__main__":
    process = CrawlerProcess(settings={
        "FEEDS": {"editais_escultura.json": {"format": "json"}},
        "DOWNLOAD_DELAY": 1,
        "ROBOTSTXT_OBEY": False
    })
    process.crawl(EditaisEsculturaSpider)
    process.start()
